clear
% NOTE: MUST RUN COMPUTE_MULTIPLE_SWIM_EDGES.M FIRST TO GENERATE FOLD DATA
% FOR PLOTS
% setup
v0 = 0.4;
alphas = [0.1, 0.3];
warning('off','MATLAB:dispatcher:UnresolvedFunctionHandle')
load('flows/vortexTimeIndep','flow')
q_eq = [0,asin(v0)/(2*pi),pi/2];
tols = 1e-9*[1,1];
int = 'Interpreter';
la = 'latex';
line = 'LineWidth';
lw = 2;
% tangent vectors
t1 = [0,0,1];
t2 = [1,0,0];
% parameters for initial conditions
n = 200;
ep = 1e-3;

% integration time
tspan = [0,4];

figure
for i = 1:length(alphas)
    disp(i)
    % calculate 2D manifold
    % set initial conditions near SFP
    if i == 1
        beta = linspace(1.8,3.4,n);
    else
        beta = linspace(1.8,3.8,n);
    end
    q0 = repmat(q_eq,n,1) + ep*(cos(beta.')*t1 + sin(beta.')*t2);

    % calculate det(dr/d(T,beta))
    alpha = alphas(i);
    % integrate trajectories along with tangent flow
    [X,Y,TH,J,detJ,T] = swimmerTangentU_Jt_n(q0(:,1),q0(:,2),q0(:,3),tspan,flow,v0,alpha,tols);

    % create matrix at each point whose determinant encodes SwIM edge location
    dXdT = reshape(flow.Ux([X(:),Y(:)],T)+v0*cos(TH(:)),size(X));
    dYdT = reshape(flow.Uy([X(:),Y(:)],T)+v0*sin(TH(:)),size(X));

    dq0dBeta = (ep*(-sin(beta.')*t1 + cos(beta.')*t2)).';
    dq0dBeta = mat2cell(dq0dBeta,3,ones(1,n));
    dq0dBeta = repmat(dq0dBeta,length(T),1);
    dRdBeta = cellfun(@(x,y) x(1:2,1:3)*y,J,dq0dBeta,'UniformOutput',false);

    % dr/d(T,beta)
    dRmat = cellfun(@(x,y,z) [x,y; z.'], num2cell(dXdT),num2cell(dYdT),dRdBeta,'UniformOutput',false);
    % determinant
    dets = cellfun(@det,dRmat);
    
    % plot where determinant > 0
    subplot(1,2,i)
    imagesc(T,beta,dets.' > 0)
    colormap(gray)
    colorbar('northoutside')
    axis xy
    xlabel('$T$',int,la)
    ylabel('$\beta$',int,la)
    set(gca,'FontSize',22)
    
    % plot SwIM fold curves
    hold on
    if i == 1
        alpha_str = '1';
    else
        alpha_str = '3';
    end
    % DATA BELOW GENERATED BY COMPUTE_MULTIPLE_SWIM_EDGES.M
    % primary fold
    load(['swimedge/lowerfold_v0_4_alpha0_' alpha_str '.mat'],'Tc','betac')
    plot(Tc,betac,'rx-',line,lw)
    % secondary fold
    load(['swimedge/upperfold_v0_4_alpha0_' alpha_str '.mat'],'Tc','betac')
    plot(Tc,betac,'bx-',line,lw)
    drawnow;
end

